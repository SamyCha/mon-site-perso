<div class="container">

  <div class="col-xs-12 col-md-5">
    <h3>Avoir un layout propre</h3>
    1.Les variables scss:
    Aller sur: https://getbootstrap.com/docs/3.3/customize/#less-variables
    Et écrire le thème dans config/_bootstrap_variables.scss, Par exemple si on veut modifier la couleur d’un drop down, on récupère sur le site ci-dessus et on introduit la variable dans _bootstrap_variables.scss
    2. Structurer le layout avec des partielles:

    <%= render ‘shared/navbar’ %>
    <%= yield %>
    <%= render ‘shared/footer’ %>
    <%= render ‘shared/analytics’ %>
    3. Pour injecter des choses (title, metadescription google, opengraph fb…) dans le layout:
    Dans le head du layout:
    <title><%= yield(:title) || ‘nom du site’ %> </title>
    Dans mes views pour afficher un titre spécifique, j’ajoute:
    <% content_for(:title) do %>
    <%= @product.name %> chez nom_du_site
    <% end %>
    Pareil pour la meta-description dans le head du layout:
    <meta name=‘description’
    content=‘<%=(yield(:description) || ‘’ ).squish %>>
    Dans les views:
    <% content_for(:description) do %>
    <%= @product.description %>
    <% end %>
    4. S’assurer que dans le head du layout on a bien les 2 lignes suivantes qui correspondent à l’asset pipeline et permettent la liaison avec les fichiers que l’on appelle:
    <%= stylesheet_link_tag 'application', media: 'all' %>
    <%= javascript_include_tag 'application' %>
    5. Le SCSS:
    On met le css de chaque composant dans components. Puis on met les imports des components dans index.scss. exemple:
    @import « cards »;
    Et  l’index.scss est lui même importé dans application.scss.
    @import « components/index »;
    Et le layout va rapporter tout ça grâce à la ligne stylsheet…
    6. Pareil côté JS on a application.js qui va avoir ce même rôle au niveau JJ et qui ramène tout ça vers le layout, exemple dans application.js
    //= require jquery-ui
    7 . S’assurer que dans le layout le head les lignes suivantes sont présentes pour activer le responsive de bootstrap:
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <h3>Ffire un deuxième layout sur le même site</h3>
    Créer un nouveau layout comme application.html.erb exemple: bloglayout.html.erb
    Et ensuite dans les controllers qui utilisent ce layout plutôt que celui de application.html.erb:
    On dit que l’on préfère ce layout. exmple:
    class PostsController < ApplicationController
    layout ‘bloglayout’
    end
  </div>
  <div class="col-xs-12 col-md-7">
  </div>
</div>
